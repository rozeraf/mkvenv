#!/usr/bin/env bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏ Python
# –ê–≤—Ç–æ—Ä: venv-manager v1.0
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: mkvenv [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_VENV_NAME=".venv"
DEFAULT_PACKAGES="pip wheel setuptools pip-tools"
CONFIG_FILE="$HOME/.venv-manager.conf"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
  cat <<EOF
üêç venv-manager - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏ Python

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    mkvenv [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]

–ö–û–ú–ê–ù–î–´:
    create, c           –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    activate, a         –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    deactivate, d       –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    remove, rm          –£–¥–∞–ª–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    list, ls            –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    info, i             –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    upgrade, up         –û–±–Ω–æ–≤–∏—Ç—å pip –∏ –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    requirements, req   –†–∞–±–æ—Ç–∞ —Å requirements.txt
    clean               –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à pip
    config              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    interactive, int    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    help, h             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û–ü–¶–ò–ò:
    -n, --name NAME     –ò–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .venv)
    -p, --python VER    –í–µ—Ä—Å–∏—è Python (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏–∑ pyenv)
    -f, --force         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    -a, --activate      –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    --no-packages       –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    --with-packages PKG –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–ü–†–ò–ú–ï–†–´:
    mkvenv                           # –°–æ–∑–¥–∞—Ç—å .venv —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π Python –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
    mkvenv interactive               # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    mkvenv c -n myproject -p 3.11    # –°–æ–∑–¥–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å Python 3.11
    mkvenv a                         # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å .venv
    mkvenv rm -n myproject           # –£–¥–∞–ª–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ myproject
    mkvenv create --with-packages "django fastapi"  # –°–æ–∑–¥–∞—Ç—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    mkvenv info                      # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏

EOF
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
  if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
  fi
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
save_config() {
  cat >"$CONFIG_FILE" <<EOF
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è venv-manager
DEFAULT_VENV_NAME="$DEFAULT_VENV_NAME"
DEFAULT_PACKAGES="$DEFAULT_PACKAGES"
EOF
  print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $CONFIG_FILE"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Python
get_python_version() {
  local version="$1"

  if [[ -n "$version" ]]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ pyenv
    if command -v pyenv >/dev/null 2>&1; then
      if pyenv versions --bare | grep -q "^$version$"; then
        echo "$HOME/.pyenv/versions/$version/bin/python"
        return 0
      fi
    fi

    # –ò—â–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ
    if command -v "python$version" >/dev/null 2>&1; then
      echo "python$version"
      return 0
    fi

    print_error "Python $version –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return 1
  fi

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
  if command -v pyenv >/dev/null 2>&1; then
    local global_version=$(pyenv global)
    local python_path="$HOME/.pyenv/versions/$global_version/bin/python"

    if [[ -x "$python_path" ]]; then
      echo "$python_path"
      return 0
    fi
  fi

  # Fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π Python
  if command -v python3 >/dev/null 2>&1; then
    echo "python3"
    return 0
  elif command -v python >/dev/null 2>&1; then
    echo "python"
    return 0
  fi

  print_error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
  return 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
create_venv() {
  local venv_name="$DEFAULT_VENV_NAME"
  local python_version=""
  local force=false
  local activate_after=false
  local install_packages=true
  local additional_packages=""

  # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  while [[ $# -gt 0 ]]; do
    case $1 in
    -n | --name)
      venv_name="$2"
      shift 2
      ;;
    -p | --python)
      python_version="$2"
      shift 2
      ;;
    -f | --force)
      force=true
      shift
      ;;
    -a | --activate)
      activate_after=true
      shift
      ;;
    --no-packages)
      install_packages=false
      shift
      ;;
    --with-packages)
      additional_packages="$2"
      shift 2
      ;;
    *)
      shift
      ;;
    esac
  done

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  if [[ -d "$venv_name" ]]; then
    if [[ "$force" == true ]]; then
      print_warning "–£–¥–∞–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name"
      rm -rf "$venv_name"
    else
      print_error "–û–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -f –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
      return 1
    fi
  fi

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ Python
  local python_path
  python_path=$(get_python_version "$python_version")
  [[ $? -ne 0 ]] && return 1

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
  local version_info
  version_info=$("$python_path" --version 2>&1)
  print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å $version_info"
  print_info "–ü—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É: $python_path"

  # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  print_info "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ $venv_name..."
  "$python_path" -m venv "$venv_name"

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
  print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
  "$venv_name/bin/pip" install --upgrade pip

  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  if [[ "$install_packages" == true ]]; then
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: $DEFAULT_PACKAGES"
    "$venv_name/bin/pip" install $DEFAULT_PACKAGES
  fi

  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  if [[ -n "$additional_packages" ]]; then
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: $additional_packages"
    "$venv_name/bin/pip" install $additional_packages
  fi

  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if [[ -f "requirements.txt" ]]; then
    print_info "–ù–∞–π–¥–µ–Ω requirements.txt, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    "$venv_name/bin/pip" install -r requirements.txt
  fi

  print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: $venv_name"

  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è
  if [[ "$activate_after" == true ]]; then
    print_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!"
    print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
    echo
    echo "  source $venv_name/bin/activate"
    echo

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    local activate_script="/tmp/activate_venv_$.sh"
    cat >"$activate_script" <<EOF
#!/bin/bash
cd "$(pwd)"
source $venv_name/bin/activate
exec \$SHELL
EOF
    chmod +x "$activate_script"

    print_info "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—ã–π shell —Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º:"
    echo "  $activate_script"
    echo

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π shell —Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π shell —Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º? (Y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
      print_info "–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ shell..."
      exec bash -c "cd '$(pwd)' && source $venv_name/bin/activate && exec \$SHELL"
    fi
  else
    print_info "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: source $venv_name/bin/activate"
  fi
}

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
activate_venv() {
  local venv_name="$DEFAULT_VENV_NAME"

  if [[ $# -gt 0 ]]; then
    case $1 in
    -n | --name)
      venv_name="$2"
      ;;
    *)
      venv_name="$1"
      ;;
    esac
  fi

  if [[ ! -d "$venv_name" ]]; then
    print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    return 1
  fi

  print_info "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: source $venv_name/bin/activate"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
remove_venv() {
  local venv_name="$DEFAULT_VENV_NAME"

  if [[ $# -gt 0 ]]; then
    case $1 in
    -n | --name)
      venv_name="$2"
      ;;
    *)
      venv_name="$1"
      ;;
    esac
  fi

  if [[ ! -d "$venv_name" ]]; then
    print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    return 1
  fi

  read -p "–£–¥–∞–ª–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name? (y/N): " -n 1 -r
  echo

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "$venv_name"
    print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name —É–¥–∞–ª–µ–Ω–æ"
  else
    print_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
  fi
}

# –°–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
list_venvs() {
  print_info "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"

  local found=false
  for dir in .venv* venv* env*; do
    if [[ -d "$dir" && -f "$dir/bin/activate" ]]; then
      echo "  üìÅ $dir"
      found=true
    fi
  done

  if [[ "$found" == false ]]; then
    print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
  fi
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
show_info() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
    print_info "–¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $VIRTUAL_ENV"
    print_info "–í–µ—Ä—Å–∏—è Python: $(python --version)"
    print_info "Pip –≤–µ—Ä—Å–∏—è: $(pip --version)"
    print_info "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:"
    pip list --format=columns
  else
    print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [[ -d ".venv" ]]; then
      print_info "–ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ .venv"
      print_info "–í–µ—Ä—Å–∏—è Python: $(.venv/bin/python --version)"
    fi
  fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
upgrade_packages() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –∏ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    pip install --upgrade pip $DEFAULT_PACKAGES
    print_success "–ü–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
  else
    print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    return 1
  fi
}

# –†–∞–±–æ—Ç–∞ —Å requirements
manage_requirements() {
  local action="$1"

  case "$action" in
  freeze)
    if [[ -n "$VIRTUAL_ENV" ]]; then
      pip freeze >requirements.txt
      print_success "requirements.txt —Å–æ–∑–¥–∞–Ω"
    else
      print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    fi
    ;;
  install)
    if [[ -f "requirements.txt" ]]; then
      pip install -r requirements.txt
      print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
      print_error "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    ;;
  *)
    print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: freeze, install"
    ;;
  esac
}

# –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
clean_cache() {
  if command -v pip >/dev/null 2>&1; then
    print_info "–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ pip..."
    pip cache purge
    print_success "–ö–µ—à –æ—á–∏—â–µ–Ω"
  fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
configure() {
  echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ venv-manager"
  echo

  read -p "–ò–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [$DEFAULT_VENV_NAME]: " new_name
  DEFAULT_VENV_NAME="${new_name:-$DEFAULT_VENV_NAME}"

  read -p "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã [$DEFAULT_PACKAGES]: " new_packages
  DEFAULT_PACKAGES="${new_packages:-$DEFAULT_PACKAGES}"

  save_config
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
interactive_create() {
  print_info "üéõÔ∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  echo

  # –ò–º—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
  read -p "–ò–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è [$DEFAULT_VENV_NAME]: " venv_name
  venv_name="${venv_name:-$DEFAULT_VENV_NAME}"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
  if [[ -d "$venv_name" ]]; then
    read -p "–û–∫—Ä—É–∂–µ–Ω–∏–µ $venv_name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      print_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
      return 0
    fi
  fi

  # –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ Python
  echo
  print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Python:"

  local versions=()
  local counter=1

  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é pyenv
  if command -v pyenv >/dev/null 2>&1; then
    local global_version=$(pyenv global 2>/dev/null)
    if [[ -n "$global_version" ]]; then
      versions+=("$global_version (–≥–ª–æ–±–∞–ª—å–Ω–∞—è pyenv)")
      echo "  $counter) $global_version (–≥–ª–æ–±–∞–ª—å–Ω–∞—è pyenv)"
      ((counter++))
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏ pyenv
    while IFS= read -r version; do
      if [[ "$version" != "$global_version" ]]; then
        versions+=("$version")
        echo "  $counter) $version"
        ((counter++))
      fi
    done < <(pyenv versions --bare 2>/dev/null)
  fi

  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
  for py_cmd in python3.12 python3.11 python3.10 python3.9 python3 python; do
    if command -v "$py_cmd" >/dev/null 2>&1; then
      local py_version=$("$py_cmd" --version 2>&1 | cut -d' ' -f2)
      local found=false
      for existing in "${versions[@]}"; do
        if [[ "$existing" == *"$py_version"* ]]; then
          found=true
          break
        fi
      done

      if [[ "$found" == false ]]; then
        versions+=("$py_cmd ($py_version)")
        echo "  $counter) $py_cmd ($py_version)"
        ((counter++))
      fi
    fi
  done

  echo
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é Python [1]: " py_choice
  py_choice=${py_choice:-1}

  if [[ "$py_choice" -ge 1 && "$py_choice" -le "${#versions[@]}" ]]; then
    local selected_version="${versions[$((py_choice - 1))]}"
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏
    local python_version=$(echo "$selected_version" | cut -d' ' -f1)
  else
    print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
    return 1
  fi

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
  echo
  print_info "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã: $DEFAULT_PACKAGES"
  read -p "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): " additional_packages

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
  echo
  read -p "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è? (Y/n): " -n 1 -r
  echo
  local activate_after=true
  if [[ $REPLY =~ ^[Nn]$ ]]; then
    activate_after=false
  fi

  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  echo
  print_info "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:"
  print_info "  –ò–º—è: $venv_name"
  print_info "  Python: $selected_version"
  print_info "  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: ${additional_packages:-–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç}"
  print_info "  –ê–∫—Ç–∏–≤–∞—Ü–∏—è: $activate_after"
  echo

  # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  local args=("-n" "$venv_name" "-p" "$python_version")
  if [[ "$activate_after" == true ]]; then
    args+=("-a")
  fi
  if [[ -n "$additional_packages" ]]; then
    args+=("--with-packages" "$additional_packages")
  fi

  create_venv "${args[@]}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  load_config

  if [[ $# -eq 0 ]]; then
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞—ë–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    create_venv -a
    return
  fi

  local command="$1"
  shift

  case "$command" in
  create | c)
    create_venv "$@"
    ;;
  activate | a)
    activate_venv "$@"
    ;;
  deactivate | d)
    print_info "–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: deactivate"
    ;;
  remove | rm)
    remove_venv "$@"
    ;;
  list | ls)
    list_venvs
    ;;
  info | i)
    show_info
    ;;
  upgrade | up)
    upgrade_packages
    ;;
  requirements | req)
    manage_requirements "$@"
    ;;
  clean)
    clean_cache
    ;;
  interactive | int)
    interactive_create
    ;;
  config)
    configure
    ;;
  help | h | --help)
    show_help
    ;;
  *)
    print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
    print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'mkvenv help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    return 1
    ;;
  esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
